#include "services_microboone.fcl"

BEGIN_PROLOG

Hyperon_filter:
{
  module_type: HyperonSignal
  GenieGenModuleLabel: "generator"
  GeantLabel: "largeant"


}

END_PROLOG

process_name: HyperonFiltering


services:
{
  scheduler:    { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  # TFileService: { fileName: "single_hist_uboone.root" }
  TimeTracker:  {}
  MemoryTracker:     { } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
  @table::microboone_gen_services
}


services.DetectorClocksService.InheritClockConfig: false


outputs: {
  out: {
    module_type: RootOutput
    fileName: "%ifb_%tc_hyperonfilter.root""
    dataTier: "generated"  
    compressionLevel: 1
    SelectEvents: [ hyperon_path ]
  }
}
#wireParameterSets: false

physics:
{

 filters: {
   hyperoneventfilter: @local::Hyperon_filter
 }

 hyperon_path: [ hyperoneventfilter ]
 out_stream: [ out ]

 trigger_paths: [ hyperon_path ]
 end_paths: [ out_stream ]
}



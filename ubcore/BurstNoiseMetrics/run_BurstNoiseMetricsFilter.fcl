#include "services_microboone.fcl"
#include "BurstNoiseMetrics.fcl"

process_name: BurstNoiseMetricsFilter
services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "bnm_hist.root" }
  RandomNumberGenerator: {} #ART native random number generator
  TimeTracker:  {}   
}

source:
{
  module_type: RootInput 
  maxEvents:  -1        # Number of events to create
}

physics:
{
 
 ### Here you will define any filter modules you want to run ###
 filters:
 {
  bnms : @local::burstnoisemetricsfilter 
 
 }
 
 reco: [ bnms ]
 
 ana:[ ]
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]
 
 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [reco] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

outputs:
{
 out1:
 {
   module_type: RootOutput
   #SelectEvents: {SelectEvents:[reco]}
   fileName:    "%ifb_BNMS.root"
   dataTier:    "reco"
   compressionLevel: 1
 }
}

